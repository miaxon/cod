CREATE DEFINER=`dc_admin`@`%` PROCEDURE `session_clear`()
    MODIFIES SQL DATA
    DETERMINISTIC
BEGIN
DECLARE timeout INT DEFAULT 0;  
  select `value` into timeout from `dc_cfg` where `key`='session_timeout';
  delete from `dc_session` where `timestamp` < (CURRENT_TIMESTAMP() - timeout);
END

CREATE DEFINER=`dc_admin`@`%` FUNCTION `logon_ssid`(
        `user_ssid` VARCHAR(255)
    ) RETURNS int(11)
    MODIFIES SQL DATA
    DETERMINISTIC
BEGIN  
  DECLARE result INT DEFAULT 0;  
  call session_clear();
  select id into result from `dc_session` where `ssid`=user_ssid;
  RETURN result;
END

CREATE DEFINER=`dc_admin`@`%` FUNCTION `logon`(
        `user_name` VARCHAR(255),
        `user_ssid` VARCHAR(255),
        `user_password` VARCHAR(255)
    ) RETURNS varchar(255) CHARSET utf8
    DETERMINISTIC
BEGIN
  DECLARE session_id VARCHAR(255); 
  DECLARE user_id INT;
  DECLARE winauth INT;
  
  call session_clear();
 
  select `id` into user_id from `dc_user` where `name`=user_name limit 1;  
  
  
  IF user_id IS NOT NULL THEN
    select `allow_winauth` into winauth from `dc_user` where `name`=user_name limit 1;
    
    IF winauth = 1 THEN
      select `ssid` into session_id from `dc_session` where `ssid`=user_ssid limit 1;
      IF session_id IS NULL THEN
        insert into `dc_session` (`ssid`, `user_id`) values (UUID(), user_id);
        select `ssid` into session_id from `dc_session` where `user_id`=user_id limit 1;
      END IF;
      update `dc_user` set `last_logon`=CURRENT_TIMESTAMP() where `name`=user_name;
    END IF;
    
    IF winauth = 0 THEN
      SET user_id = NULL;
      select `id` into user_id from `dc_user` where `name`=user_name and `passwd`=sha2(user_password, 256) limit 1;
      IF user_id IS NOT NULL THEN
        select `ssid` into session_id from `dc_session` where `ssid`=user_ssid limit 1;
        IF session_id IS NULL THEN      
          insert into `dc_session` (`ssid`, `user_id`) values (UUID(), user_id);
          select `ssid` into session_id from `dc_session` where `user_id`=user_id limit 1;
        END IF;
        update `dc_user` set `last_logon`=CURRENT_TIMESTAMP() where `name`=user_name;
       END IF;
     END IF;
     
  END IF;    
  RETURN session_id;
  
END


CREATE ALGORITHM=UNDEFINED DEFINER='admin'@'%' SQL SECURITY DEFINER VIEW `log_view`
AS
select
  `dc_log`.`timestamp` AS `timestamp`,
  `dc_log`.`remote_ip` AS `remote_ip`,
  `dc_user`.`full_name` AS `name`,
  `dc_action`.`name` AS `action`,
  `dc_type`.`name` AS `type`,
  `dc_log`.`object_id` AS `object_id`,
  `dc_log`.`object_full_name` AS `object_full_name`,
  `dc_log`.`params` AS `params`
from
  (((`dc_log`
  join `dc_user` on ((`dc_log`.`user_id` = `dc_user`.`id`)))
  join `dc_action` on ((`dc_log`.`action_id` = `dc_action`.`id`)))
  join `dc_type` on ((`dc_log`.`type_id` = `dc_type`.`id`)));
  
  
  
   protected override void OnMouseLeave(EventArgs e)
        {
            int nIndex = -1;

            Point pt = this.PointToClient(MousePosition);
            RectangleF tabTextArea = RectangleF.Empty;
            for (int index = 0; index < this.TabCount; index++)
            {
                tabTextArea = (RectangleF)this.GetTabRect(index);

                if (tabTextArea.Contains(pt))
                {
                    nIndex = index;
                    break;
                }
            }
            if (nIndex < 0)
                return;
            Graphics g = CreateGraphics();
            g.SmoothingMode = SmoothingMode.AntiAlias;
            //RectangleF tabTextArea = RectangleF.Empty;
            //for (int nIndex = 0; nIndex < this.TabCount; nIndex++)
            //{
            if (nIndex != this.SelectedIndex)
            {
                tabTextArea = (RectangleF)this.GetTabRect(nIndex);
                GraphicsPath _Path = new GraphicsPath();
                _Path.AddRectangle(tabTextArea);
                using (LinearGradientBrush _Brush = new LinearGradientBrush(tabTextArea, SystemColors.Control, SystemColors.ControlLight, LinearGradientMode.Vertical))
                {
                    ColorBlend _ColorBlend = new ColorBlend(3);

                    _ColorBlend.Colors = new Color[]{  SystemColors.ActiveBorder,
                                                        SystemColors.ActiveBorder,SystemColors.ActiveBorder,
                                                        SystemColors.ActiveBorder};

                    _ColorBlend.Positions = new float[] { 0f, .4f, 0.5f, 1f };
                    _Brush.InterpolationColors = _ColorBlend;
                    g.FillRectangle(_Brush, tabTextArea.X + tabTextArea.Width - 22, 4, tabTextArea.Height - 2, tabTextArea.Height - 5);
                    g.DrawRectangle(Pens.White, tabTextArea.X + tabTextArea.Width - 20, 6, tabTextArea.Height - 8, tabTextArea.Height - 9);
                    using (Pen pen = new Pen(Color.White, 2))
                    {
                        g.DrawLine(pen, tabTextArea.X + tabTextArea.Width - 16, 9, tabTextArea.X + tabTextArea.Width - 7, 17);
                        g.DrawLine(pen, tabTextArea.X + tabTextArea.Width - 16, 17, tabTextArea.X + tabTextArea.Width - 7, 9);
                    }

                    _ColorBlend.Positions = new float[] { 0f, .4f, 0.5f, 1f };
                    // assign the color blend to the pathgradientbrush
                    _Brush.InterpolationColors = _ColorBlend;

                    g.FillRectangle(_Brush, tabTextArea.X + tabTextArea.Width - 43, 4, tabTextArea.Height - 3, tabTextArea.Height - 5);
                    // e.Graphics.DrawRectangle(SystemPens.GradientInactiveCaption, tabTextArea.X + tabTextArea.Width - 37, 7, 13, 13);
                    g.DrawRectangle(new Pen(Color.White), tabTextArea.X + tabTextArea.Width - 41, 6, tabTextArea.Height - 7, tabTextArea.Height - 9);
                    using (Pen pen = new Pen(Color.White, 2))
                    {
                        g.DrawLine(pen, tabTextArea.X + tabTextArea.Width - 36, 11, tabTextArea.X + tabTextArea.Width - 33, 16);
                        g.DrawLine(pen, tabTextArea.X + tabTextArea.Width - 33, 16, tabTextArea.X + tabTextArea.Width - 30, 11);
                    }

                }
                _Path.Dispose();

            }
            else
            {

                tabTextArea = (RectangleF)this.GetTabRect(nIndex);
                GraphicsPath _Path = new GraphicsPath();
                _Path.AddRectangle(tabTextArea);
                using (LinearGradientBrush _Brush = new LinearGradientBrush(tabTextArea, SystemColors.Control, SystemColors.ControlLight, LinearGradientMode.Vertical))
                {
                    ColorBlend _ColorBlend = new ColorBlend(3);
                    _ColorBlend.Positions = new float[] { 0f, .4f, 0.5f, 1f };

                    _ColorBlend.Colors = new Color[]{Color.FromArgb(255,231,164,152),
                                                      Color.FromArgb(255,231,164,152),Color.FromArgb(255,197,98,79),
                                                      Color.FromArgb(255,197,98,79)};
                    _Brush.InterpolationColors = _ColorBlend;
                    g.FillRectangle(_Brush, tabTextArea.X + tabTextArea.Width - 22, 4, tabTextArea.Height - 3, tabTextArea.Height - 5);
                    g.DrawRectangle(Pens.White, tabTextArea.X + tabTextArea.Width - 20, 6, tabTextArea.Height - 8, tabTextArea.Height - 9);
                    using (Pen pen = new Pen(Color.White, 2))
                    {
                        g.DrawLine(pen, tabTextArea.X + tabTextArea.Width - 16, 9, tabTextArea.X + tabTextArea.Width - 7, 17);
                        g.DrawLine(pen, tabTextArea.X + tabTextArea.Width - 16, 17, tabTextArea.X + tabTextArea.Width - 7, 9);
                    }

                    //Drawing menu button
                    _ColorBlend.Colors = new Color[]{SystemColors.ControlLightLight,
                                                     Color.FromArgb(255,SystemColors.ControlLight),SystemColors.ControlDark,
                                                     SystemColors.ControlLightLight};
                    _ColorBlend.Positions = new float[] { 0f, .4f, 0.5f, 1f };
                    _Brush.InterpolationColors = _ColorBlend;
                    _ColorBlend.Colors = new Color[]{Color.FromArgb(255,170,213,243),
                                                      Color.FromArgb(255,170,213,243),Color.FromArgb(255,44,137,191),
                                                      Color.FromArgb(255,44,137,191)};
                    _Brush.InterpolationColors = _ColorBlend;
                    g.FillRectangle(_Brush, tabTextArea.X + tabTextArea.Width - 43, 4, tabTextArea.Height - 3, tabTextArea.Height - 5);
                    g.DrawRectangle(Pens.White, tabTextArea.X + tabTextArea.Width - 41, 6, tabTextArea.Height - 7, tabTextArea.Height - 9);
                    using (Pen pen = new Pen(Color.White, 2))
                    {
                        g.DrawLine(pen, tabTextArea.X + tabTextArea.Width - 36, 11, tabTextArea.X + tabTextArea.Width - 33, 16);
                        g.DrawLine(pen, tabTextArea.X + tabTextArea.Width - 33, 16, tabTextArea.X + tabTextArea.Width - 30, 11);
                    }

                }
                _Path.Dispose();
            }

            //}

            g.Dispose();


        }

SET @query = 'SELECT Col1, Col2... FROM Tab1, Tab2 WITH JOINS...';
CASE pSearchType
  WHEN 1 THEN
    SET @where = 'Col1 = pInput1';
  WHEN 2 THEN
    SET @where = 'Col1 = pInput1 AND Col2 = pInput2';
  WHEN 3 THEN
    SET @where = 'Col1 = pInput1 ORDER BY Col4';
END CASE;
SET @sql = CONCAT(@query,' WHERE ',@where);
PREPARE s FROM @sql;
EXECUTE s;
DEALLOCATE PREPARE s;

	    OpenFileDialog dlg = new OpenFileDialog();
            dlg.AddExtension = true;
            dlg.Multiselect = false;
            if (dlg.ShowDialog() != DialogResult.OK)
                return -1;
            string fname = Path.GetFileName(dlg.FileName);
            FileStream fs = new FileStream(dlg.FileName, FileMode.Open, FileAccess.Read);
            long fsize = fs.Length;
            byte[] fdata = new byte[fsize];
            fs.Read(fdata, 0, (int)fsize);
            fs.Close();

		//MemoryStream ms = new MemoryStream(rawData);
                //Image x = Image.FromStream(ms);
                result = (Bitmap)((new ImageConverter()).ConvertFrom(fdata));